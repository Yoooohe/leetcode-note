二叉树题目的递归解法可以分两类思路：

1. 遍历一遍二叉树得出答案【遍历】 => 回溯算法核心框架
  思考方向：是否可以通过遍历一遍二叉树得到答案？
          如果可以，用一个traverse函数配合外部变量来实现。
  二叉树的遍历框架：
   void traverse(TreeNode, root) {
    // 前序位置
    traverse(root.left)
    // 前序位置
    traverse(root.right)
    // 前序位置
   }
  所谓前序位置，就是刚进入一个节点（元素）的时候，后序位置就是即将离开一个节点（元素）的时候

2. 通过分解问题计算出答案【分解】 => 动态规划核心框架
 思考方向：是否可以定义一个递归函数，通过子问题(子树)的答案推导出原问题的答案？
          如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值。

无论使用哪种思维模式，你都需要思考：

如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前/中/后序位置）做？
其他的节点不用你操心，递归函数会帮你在所有节点上执行相同的操作。

-----------------------------------------------------------------------------

层序遍历框架：
// 输入一棵二叉树的根节点，层序遍历这棵二叉树
void levelTraverse(TreeNode root) {
    if (root == null) return;
    Queue<TreeNode> q = new LinkedList<>();
    q.offer(root);

    // 从上到下遍历二叉树的每一层
    while (!q.isEmpty()) {
        int sz = q.size();
        // 从左到右遍历每一层的每个节点
        for (int i = 0; i < sz; i++) {
            TreeNode cur = q.poll();
            // 将下一层节点放入队列
            if (cur.left != null) {
                q.offer(cur.left);
            }
            if (cur.right != null) {
                q.offer(cur.right);
            }
        }
    }
}

